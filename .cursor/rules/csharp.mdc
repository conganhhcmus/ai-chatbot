---
description: 
globs: **/*.cs
alwaysApply: false
---
## Code Style and Structure
- Write concise, idiomatic C# code with accurate examples.
- Follow .NET and ASP.NET Core conventions and best practices.
- Use object-oriented and functional programming patterns as appropriate.
- Prefer LINQ and lambda expressions for collection operations.
- Use descriptive variable and method names (e.g., 'IsUserSignedIn', 'CalculateTotal').
- Structure files according to .NET conventions (Controllers, Models, Services, etc.).

## Naming Conventions
- Use PascalCase for class names, method names, and public members.
- Use camelCase for local variables and private fields.
- Use UPPERCASE for constants.
- Prefix interface names with "I" (e.g., 'IUserService').

## Syntax and Formatting
- Follow the C# Coding Conventions (https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)
- Use C#'s expressive syntax (e.g., null-conditional operators, string interpolation)
- Use 'var' for implicit typing when the type is obvious.

## API Design
- Follow RESTful API design principles.
- Implement global exception handling middleware.
- Use exceptions for exceptional cases, not for control flow. 

## Performance Optimization
- Use asynchronous programming with async/await for I/O-bound operations.
- Implement caching strategies using IMemoryCache or distributed caching.

## Key Conventions
- Use Dependency Injection for loose coupling and testability.
- Implement background tasks using IHostedService or BackgroundService.

## Testing
- Write unit tests using xUnit.
- Use NSubstitute for mocking dependencies.
- Implement integration tests for API endpoints.

## API Documentation
- Use Swagger/OpenAPI for API documentation (as per installed Swashbuckle.AspNetCore package).

- Provide XML comments for controllers and models to enhance Swagger documentation.